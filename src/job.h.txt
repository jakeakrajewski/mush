#ifndef JOB__H
#define JOB__H

#include <termios.h>
#include <sys/types.h>

typedef struct process {
  struct process *next;
  char **argv;
  pid_t pid;
  char completed;
  char stopped;
  int status;
} process;

typedef struct job {
  struct job *next;
  char *command;
  process *first_process;
  pid_t pgid;
  char notified;
  struct termios tmodes;
  int stdin, stdout, stderr;
} job;

extern job *first_job;

void init_shell(void);
void launch_job(job *j, int foreground);
void continue_job(job *j, int foreground);
void do_job_notification(void);
job *find_job(pid_t pgid);
void free_job(job *j);
void wait_for_job (job *j);
int job_is_completed (job *j);
int job_is_stopped (job *j);
void sigchld_handler(int sig);
void setup_signal_handlers();
int find_job_by_number(int job_num, job** found_job);

#endif

